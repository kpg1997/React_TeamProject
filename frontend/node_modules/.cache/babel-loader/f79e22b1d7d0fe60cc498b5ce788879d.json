{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\test22\\\\frontend\\\\src\\\\hoc\\\\auth.js\";\nimport React, { useEffect } from 'react';\nimport Axios from 'axios';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { auth } from '../_actions/user_action';\nimport { getFreeBoardList } from '../_actions/board_action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function (SpecificComponent, option, adminRoute = null) {\n  var _s = $RefreshSig$();\n\n  //null    =>  아무나 출입이 가능한 페이지\n  //true    =>  로그인한 유저만 출입이 가능한 페이지\n  //false   =>  로그인한 유저는 출입 불가능한 페이지\n  function AuthenticationCheck(props) {\n    _s();\n\n    let user = useSelector(state => state.user);\n    const dispatch = useDispatch();\n    useEffect(() => {\n      dispatch(auth()).then(response => {\n        console.log(response); //로그인 하지 않은 상태 \n\n        if (!response.payload.isAuth) {\n          if (option) {\n            props.history.push('/users/login');\n          }\n        } else {\n          //로그인 한 상태 \n          if (adminRoute && !response.payload.isAdmin) {\n            console.log('adminRoute', adminRoute);\n            console.log('!response.payload.isAdmin', !response.payload.isAdmin);\n            props.history.push('/');\n          } else {\n            if (option === false) props.history.push('/');\n          }\n        }\n      });\n    }, []);\n    return /*#__PURE__*/_jsxDEV(SpecificComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s(AuthenticationCheck, \"5J/jBDPxOCuWDcqNaifzAwnDqoU=\", false, function () {\n    return [useSelector, useDispatch];\n  });\n\n  return AuthenticationCheck;\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/test22/frontend/src/hoc/auth.js"],"names":["React","useEffect","Axios","useDispatch","useSelector","auth","getFreeBoardList","SpecificComponent","option","adminRoute","AuthenticationCheck","props","user","state","dispatch","then","response","console","log","payload","isAuth","history","push","isAdmin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,QAAqB,yBAArB;AACA,SAAQC,gBAAR,QAA+B,0BAA/B;;AAEA,eAAe,UAAUC,iBAAV,EAA6BC,MAA7B,EAAqCC,UAAU,GAAG,IAAlD,EAAwD;AAAA;;AAEnE;AACA;AACA;AACA,WAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAChC,QAAIC,IAAI,GAAGR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACD,IAAhB,CAAtB;AACA,UAAME,QAAQ,GAAGX,WAAW,EAA5B;AAEAF,IAAAA,SAAS,CAAC,MAAM;AAEZa,MAAAA,QAAQ,CAACT,IAAI,EAAL,CAAR,CAAiBU,IAAjB,CAAsBC,QAAQ,IAAI;AAC9BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EAD8B,CAE9B;;AACA,YAAI,CAACA,QAAQ,CAACG,OAAT,CAAiBC,MAAtB,EAA8B;AAC1B,cAAIZ,MAAJ,EAAY;AACRG,YAAAA,KAAK,CAACU,OAAN,CAAcC,IAAd,CAAmB,cAAnB;AACH;AACJ,SAJD,MAIO;AACH;AACA,cAAIb,UAAU,IAAI,CAACO,QAAQ,CAACG,OAAT,CAAiBI,OAApC,EAA6C;AACzCN,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBT,UAAzB;AACAQ,YAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAwC,CAACF,QAAQ,CAACG,OAAT,CAAiBI,OAA1D;AACAZ,YAAAA,KAAK,CAACU,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACH,WAJD,MAIO;AACH,gBAAId,MAAM,KAAK,KAAf,EACIG,KAAK,CAACU,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACP;AACJ;AACJ,OAlBD;AAmBH,KArBQ,EAqBN,EArBM,CAAT;AAuBA,wBACI,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AAnCkE,KAK1DZ,mBAL0D;AAAA,YAMpDN,WANoD,EAO9CD,WAP8C;AAAA;;AAoCnE,SAAOO,mBAAP;AACH","sourcesContent":["import React, { useEffect } from 'react';\r\nimport Axios from 'axios';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { auth } from '../_actions/user_action';\r\nimport {getFreeBoardList} from '../_actions/board_action'\r\n\r\nexport default function (SpecificComponent, option, adminRoute = null) {\r\n\r\n    //null    =>  아무나 출입이 가능한 페이지\r\n    //true    =>  로그인한 유저만 출입이 가능한 페이지\r\n    //false   =>  로그인한 유저는 출입 불가능한 페이지\r\n    function AuthenticationCheck(props) {\r\n        let user = useSelector(state => state.user);\r\n        const dispatch = useDispatch();\r\n\r\n        useEffect(() => {\r\n\r\n            dispatch(auth()).then(response => {\r\n                console.log(response)\r\n                //로그인 하지 않은 상태 \r\n                if (!response.payload.isAuth) {\r\n                    if (option) {\r\n                        props.history.push('/users/login')\r\n                    }\r\n                } else {\r\n                    //로그인 한 상태 \r\n                    if (adminRoute && !response.payload.isAdmin) {\r\n                        console.log('adminRoute',adminRoute)\r\n                        console.log('!response.payload.isAdmin',!response.payload.isAdmin)\r\n                        props.history.push('/')\r\n                    } else {\r\n                        if (option === false)\r\n                            props.history.push('/')\r\n                    }\r\n                }\r\n            })\r\n        }, [])\r\n\r\n        return (\r\n            <SpecificComponent />\r\n        )\r\n    }\r\n    return AuthenticationCheck\r\n}"]},"metadata":{},"sourceType":"module"}